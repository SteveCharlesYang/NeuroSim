//bool debug = result["debug"].as<bool>();
//std::string bar;
//if (result.count("bar"))
//bar = result["bar"].as<std::string>();
//int foo = result["foo"].as<int>();

#ifndef LIB_ARGPARSER_H_
#define LIB_ARGPARSER_H_

cxxopts::Options options("NeuroSim", "This is description.");

enum DeviceType {Device_Ideal, Device_Real, Device_Measured, Device_SRAM, Device_DigitalNVM};
static std::map<std::string, DeviceType> DeviceTypeMap;

cxxopts::ParseResult initialize_options(int argc, char** argv){
    options.add_options()
            ("help", "Help")
            ("trfp", "Training File Patch", cxxopts::value<std::string>()->default_value("patch60000_train.txt"))
            ("trfl", "Training File Label", cxxopts::value<std::string>()->default_value("label60000_train.txt"))
            ("tefp", "Testing File Patch", cxxopts::value<std::string>()->default_value("patch10000_test.txt"))
            ("tefl", "Testing File Label", cxxopts::value<std::string>()->default_value("label10000_test.txt"))
            ("IHDevice", "IH Device Type", cxxopts::value<std::string>()->default_value("Real"))
            ("HODevice", "HO Device Type", cxxopts::value<std::string>()->default_value("Real"))
            ("MNISTTrainImgs", "MNIST training images", cxxopts::value<int>()->default_value("60000"))
            ("MNISTTestImgs", "MNIST testing images", cxxopts::value<int>()->default_value("10000"))
            ("TrainImgEpoch", "Training images per epoch", cxxopts::value<int>()->default_value("8000"))
            ("totEpoch", "Total number of epochs", cxxopts::value<int>()->default_value("125"))
            ("intEpoch", "Internal number of epochs", cxxopts::value<int>()->default_value("1"))
            ("nIn", "Neurons in input layer", cxxopts::value<int>()->default_value("400"))
            ("nHide", "Neurons in hidden layer", cxxopts::value<int>()->default_value("100"))
            ("nOut", "Neurons in output layer", cxxopts::value<int>()->default_value("10"))
            ("alp1", "Learning rate for the weights from input to hidden layer", cxxopts::value<double>()->default_value("0.4"))
            ("alp2", "Learning rate for the weights from hidden to output layer", cxxopts::value<double>()->default_value("0.2"))
            ("maxW", "Upper bound of weight value", cxxopts::value<double>()->default_value("1.0"))
            ("minW", "Lower bound of weight value", cxxopts::value<double>()->default_value("-1.0"))
            ("opt", "Optimization type", cxxopts::value<std::string>()->default_value("SGD"))
            ("HWTrainFF", "Use hardware in the feed forward part of training or not ", cxxopts::value<bool>()->default_value("true"))
            ("HWTrainWU", "Use hardware in the weight update part of training or not ", cxxopts::value<bool>()->default_value("true"))
            ("HWTestFF", "Use hardware in the feed forward part of testing or not ", cxxopts::value<bool>()->default_value("true"))
            ("nBitInput", "bits of the input data", cxxopts::value<int>()->default_value("1"))
            ("nBitPartial", "bits of the digital output ", cxxopts::value<int>()->default_value("8"))
            ("nWBit", "weight bits (only for pure algorithm, SRAM and digital RRAM hardware)", cxxopts::value<int>()->default_value("6"))
            ("BWthres", "black and white threshold for numBitInput=1", cxxopts::value<double>()->default_value("0.5"))
            ("Hthres", "The spiking threshold for the hidden layer ", cxxopts::value<double>()->default_value("0.5"))
            ("nColMux", "columns share 1 read circuit (for analog RRAM) or 1 S/A (for digital RRAM)", cxxopts::value<int>()->default_value("16"))
            ("nWriteColMux", "columns share 1 write column decoder driver (for digital RRAM)", cxxopts::value<int>()->default_value("16"))
            ("writeEReport", "Report write energy calculation or not", cxxopts::value<bool>()->default_value("true"))
            ("SimDynPerf", "Report the dynamic performance (latency and energy) in NeuroSim or not", cxxopts::value<bool>()->default_value("true"))
            ("relaxArrCellH", "relax the array cell height to standard logic cell height in the synaptic array", cxxopts::value<bool>()->default_value("false"))
            ("relaxArrCellW", "relax the array cell width to standard logic cell width in the synaptic array", cxxopts::value<bool>()->default_value("false"))
            ("arrWireW", "Array wire width (nm)", cxxopts::value<double>()->default_value("100"))
            ("node", "Technology node (nm)", cxxopts::value<int>()->default_value("32"))
            ("clkfq", "Clock frequency", cxxopts::value<double>()->default_value("2e9")) // --------------- Ideal
            ("IHDevMaxConductance", "Maximum cell conductance (S)", cxxopts::value<double>()->default_value("5e-6"))
            ("IHDevMinConductance", "Minimum cell conductance (S)", cxxopts::value<double>()->default_value("100e-9"))
            ("IHDevReadVoltage", "On-chip read voltage (Vr) (V)", cxxopts::value<double>()->default_value("0.5"))
            ("IHDevReadPulseWidth", "Read pulse width (s) (will be determined by S/A)", cxxopts::value<double>()->default_value("5e-9"))
            ("IHDevWriteVoltageLTP", "Write voltage (V) for LTP or weight increase", cxxopts::value<double>()->default_value("2"))
            ("IHDevWriteVoltageLTD", "Write voltage (V) for LTD or weight decrease", cxxopts::value<double>()->default_value("2"))
            ("IHDevWritePulseWidthLTP", "Write pulse width (s) for LTP or weight increase", cxxopts::value<double>()->default_value("10e-9"))
            ("IHDevWritePulseWidthLTD", "Write pulse width (s) for LTD or weight decrease", cxxopts::value<double>()->default_value("10e-9"))
            ("IHDevWriteEnergy", "Dynamic variable for calculation of write energy (J)", cxxopts::value<double>()->default_value("0"))
            ("IHDevMaxNumLevelLTP", "", cxxopts::value<double>()->default_value("63"))
            ("IHDevMaxNumLevelLTD", "", cxxopts::value<double>()->default_value("63"))
            ("IHDevNumPulse", "", cxxopts::value<double>()->default_value("0"))
            ("IHDevCMOSAccess", "True: Pseudo-crossbar (1T1R), false: cross-point", cxxopts::value<bool>()->default_value("true"))
            ("IHDevFeFET", "", cxxopts::value<bool>()->default_value("false"))
            ("IHDevGateCapFeFET", "", cxxopts::value<double>()->default_value("2.1717e-18"))
            ("IHDevResistanceAccess", "", cxxopts::value<double>()->default_value("15e3"))
            ("IHDevNonlinearIV", "", cxxopts::value<bool>()->default_value("false"))
            ("IHDevNonIdenticalPulse", "", cxxopts::value<bool>()->default_value("false"))
            ("IHDevNL", "Nonlinearity in write scheme ", cxxopts::value<double>()->default_value("10"))
            ("IHDevReadNoise", "Consider read noise or not", cxxopts::value<bool>()->default_value("false"))
            ("IHDevSigmaReadNoise", "", cxxopts::value<double>()->default_value("0.25"))
            ("IHDevConductanceRangeVar", "", cxxopts::value<bool>()->default_value("false"))
            ("IHDevMaxConductanceVar", "", cxxopts::value<double>()->default_value("0"))
            ("IHDevMinConductanceVar", "", cxxopts::value<double>()->default_value("0"))
            ("HODevMaxConductance", "", cxxopts::value<double>()->default_value("5e-6"))
            ("HODevMinConductance", "", cxxopts::value<double>()->default_value("100e-9"))
            ("HODevReadVoltage", "", cxxopts::value<double>()->default_value("0.5"))
            ("HODevReadPulseWidth", "", cxxopts::value<double>()->default_value("5e-9"))
            ("HODevWriteVoltageLTP", "", cxxopts::value<double>()->default_value("2"))
            ("HODevWriteVoltageLTD", "", cxxopts::value<double>()->default_value("2"))
            ("HODevWritePulseWidthLTP", "", cxxopts::value<double>()->default_value("10e-9"))
            ("HODevWritePulseWidthLTD", "", cxxopts::value<double>()->default_value("10e-9"))
            ("HODevWriteEnergy", "", cxxopts::value<double>()->default_value("0"))
            ("HODevMaxNumLevelLTP", "", cxxopts::value<double>()->default_value("63"))
            ("HODevMaxNumLevelLTD", "", cxxopts::value<double>()->default_value("63"))
            ("HODevNumPulse", "", cxxopts::value<double>()->default_value("0"))
            ("HODevCMOSAccess", "", cxxopts::value<bool>()->default_value("true"))
            ("HODevFeFET", "", cxxopts::value<bool>()->default_value("false"))
            ("HODevGateCapFeFET", "", cxxopts::value<double>()->default_value("2.1717e-18"))
            ("HODevResistanceAccess", "", cxxopts::value<double>()->default_value("15e3"))
            ("HODevNonlinearIV", "", cxxopts::value<bool>()->default_value("false"))
            ("HODevNonIdenticalPulse", "", cxxopts::value<bool>()->default_value("false"))
            ("HODevNL", "", cxxopts::value<double>()->default_value("10"))
            ("HODevReadNoise", "", cxxopts::value<bool>()->default_value("false"))
            ("HODevSigmaReadNoise", "", cxxopts::value<double>()->default_value("0.25"))
            ("HODevConductanceRangeVar", "", cxxopts::value<bool>()->default_value("false"))
            ("HODevMaxConductanceVar", "", cxxopts::value<double>()->default_value("0"))
            ("HODevMinConductanceVar", "", cxxopts::value<double>()->default_value("0")) //--------------------- Real
            ("IHDevNonlinearWrite", "", cxxopts::value<bool>()->default_value("true"))
            ("IHDevVinitLTP", "Initial write voltage for LTP or weight increase (V)", cxxopts::value<double>()->default_value("2.85"))
            ("IHDevVstepLTP", "Write voltage step for LTP or weight increase (V)", cxxopts::value<double>()->default_value("0.05"))
            ("IHDevVinitLTD", "Initial write voltage for LTD or weight decrease (V)", cxxopts::value<double>()->default_value("2.1"))
            ("IHDevVstepLTD", "Write voltage step for LTD or weight decrease (V)", cxxopts::value<double>()->default_value("0.05"))
            ("IHDevPWinitLTP", "Initial write pulse width for LTP or weight increase (s)", cxxopts::value<double>()->default_value("75e-9"))
            ("IHDevPWstepLTP", "Write pulse width for LTP or weight increase (s)", cxxopts::value<double>()->default_value("5e-9"))
            ("IHDevPWinitLTD", "Initial write pulse width for LTD or weight decrease (s)", cxxopts::value<double>()->default_value("75e-9"))
            ("IHDevPWstepLTD", "Write pulse width for LTD or weight decrease (s)", cxxopts::value<double>()->default_value("5e-9"))
            ("IHDevWriteVoltageSquareSum", "Sum of V^2 of non-identical pulses (dynamic variable)", cxxopts::value<double>()->default_value("0"))
            ("IHDevNLLTP", "", cxxopts::value<double>()->default_value("2.4"))
            ("IHDevNLLTD", "", cxxopts::value<double>()->default_value("-4.88"))
            ("IHDevSigmaDtoD", "", cxxopts::value<double>()->default_value("0"))
            ("HODevNonlinearWrite", "", cxxopts::value<bool>()->default_value("true"))
            ("HODevVinitLTP", "", cxxopts::value<double>()->default_value("2.85"))
            ("HODevVstepLTP", "", cxxopts::value<double>()->default_value("0.05"))
            ("HODevVinitLTD", "", cxxopts::value<double>()->default_value("2.1"))
            ("HODevVstepLTD", "", cxxopts::value<double>()->default_value("0.05"))
            ("HODevPWinitLTP", "", cxxopts::value<double>()->default_value("75e-9"))
            ("HODevPWstepLTP", "", cxxopts::value<double>()->default_value("5e-9"))
            ("HODevPWinitLTD", "", cxxopts::value<double>()->default_value("75e-9"))
            ("HODevPWstepLTD", "", cxxopts::value<double>()->default_value("5e-9"))
            ("HODevWriteVoltageSquareSum", "", cxxopts::value<double>()->default_value("0"))
            ("HODevNLLTP", "", cxxopts::value<double>()->default_value("2.4"))
            ("HODevNLLTD", "", cxxopts::value<double>()->default_value("-4.88"))
            ("HODevSigmaDtoD", "", cxxopts::value<double>()->default_value("0")) // ------------ Measured
            ("IHDevSymLTPandLTD", "", cxxopts::value<bool>()->default_value("false"))
            ("HODevSymLTPandLTD", "", cxxopts::value<bool>()->default_value("false")) // ----------- SRAM
            ("IHDevReadEnergy", "", cxxopts::value<double>()->default_value("0"))
            ("IHDevBit", "Stored bit", cxxopts::value<int>()->default_value("0"))
            ("IHDevBitPrev", "Previous bit", cxxopts::value<int>()->default_value("0"))
            ("IHDevHeightInFeatureSize", "", cxxopts::value<double>()->default_value("14.6"))
            ("IHDevWidthInFeatureSize", "", cxxopts::value<double>()->default_value("10"))
            ("IHDevWidthSRAMCellNMOS", "", cxxopts::value<double>()->default_value("2.08"))
            ("IHDevWidthSRAMCellPMOS", "", cxxopts::value<double>()->default_value("1.23"))
            ("IHDevWidthAccessCMOS", "", cxxopts::value<double>()->default_value("1.31"))
            ("IHDevMinSenseVoltage", "", cxxopts::value<double>()->default_value("0.1"))
            ("IHDevReadEnergySRAMCell", "", cxxopts::value<double>()->default_value("0"))
            ("IHDevWriteEnergySRAMCell", "", cxxopts::value<double>()->default_value("0"))
            ("HODevReadEnergy", "", cxxopts::value<double>()->default_value("0"))
            ("HODevBit", "", cxxopts::value<int>()->default_value("0"))
            ("HODevBitPrev", "", cxxopts::value<int>()->default_value("0"))
            ("HODevHeightInFeatureSize", "", cxxopts::value<double>()->default_value("14.6"))
            ("HODevWidthInFeatureSize", "", cxxopts::value<double>()->default_value("10"))
            ("HODevWidthSRAMCellNMOS", "", cxxopts::value<double>()->default_value("2.08"))
            ("HODevWidthSRAMCellPMOS", "", cxxopts::value<double>()->default_value("1.23"))
            ("HODevWidthAccessCMOS", "", cxxopts::value<double>()->default_value("1.31"))
            ("HODevMinSenseVoltage", "", cxxopts::value<double>()->default_value("0.1"))
            ("HODevReadEnergySRAMCell", "", cxxopts::value<double>()->default_value("0"))
            ("HODevWriteEnergySRAMCell", "", cxxopts::value<double>()->default_value("0")) // -------- Digital
            ("IHDevParallelRead", "Consider it is a parallel readout scheme or not", cxxopts::value<bool>()->default_value("false"))
            ("HODevParallelRead", "Consider it is a parallel readout scheme or not", cxxopts::value<bool>()->default_value("false"))
            ;

    DeviceTypeMap["Ideal"] = Device_Ideal;
    DeviceTypeMap["Real"] = Device_Real;
    DeviceTypeMap["Measured"] = Device_Measured;
    DeviceTypeMap["SRAM"] = Device_SRAM;
    DeviceTypeMap["DigitalNVM"] = Device_DigitalNVM;

    return options.parse(argc, argv);
}

#endif